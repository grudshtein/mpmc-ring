name: ci
on: [push, pull_request, workflow_dispatch]

jobs:
  linux-sanitizers:
    name: Linux (Clang) — ${{ matrix.preset }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        preset: [clang-asan, clang-tsan, clang-ubsan]
    steps:
      - uses: actions/checkout@v4
      - name: Install toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y clang ninja-build cmake
      - name: Configure
        run: cmake --preset ${{ matrix.preset }}
      - name: Build (tests)
        run: cmake --build --preset ${{ matrix.preset }} --target tests -j
      - name: Run tests
        run: ctest --preset ${{ matrix.preset }} --output-on-failure

  linux-release-bench:
    name: Linux (Clang) — Release bench
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y clang ninja-build cmake
      - name: Configure (clang-release)
        run: cmake --preset clang-release
      - name: Build (bench)
        run: cmake --build --preset clang-release --target bench -j
      - name: Upload bench artifact
        uses: actions/upload-artifact@v4
        with:
          name: bench-linux
          path: out/build/clang-release/bench
          if-no-files-found: error

  windows-msvc:
    name: Windows (MSVC) — ${{ matrix.cfg.name }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - { name: "Release", preset: "msvc-ninja-release", config: "Release" }
          - { name: "ASan",    preset: "msvc-ninja-asan",    config: "Release" }
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v4

      - name: Configure (${{ matrix.cfg.name }})
        run: cmake --preset ${{ matrix.cfg.preset }}

      - name: Build (tests)
        run: cmake --build --preset ${{ matrix.cfg.preset }} --target tests --config ${{ matrix.cfg.config }} -j

      - name: Run tests (Release)
        if: ${{ matrix.cfg.name == 'Release' }}
        run: ctest --preset ${{ matrix.cfg.preset }} --output-on-failure -C ${{ matrix.cfg.config }}

      - name: Run tests (ASan) with ASan runtime on PATH
        if: ${{ matrix.cfg.name == 'ASan' }}
        run: |
          $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $install = & $vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          if (-not $install) { throw "VS install not found" }

          $cands = @(
            "$install\VC\Redist\MSVC\*\asan",
            "$install\VC\Redist\MSVC\*\AddressSanitizer\x64",
            "$install\VC\Tools\MSVC\*\bin\Hostx64\x64",
            "$env:VCToolsRedistDir\asan",
            "$env:VCToolsRedistDir\AddressSanitizer\x64"
          )

          $dirs = @()
          foreach ($p in $cands) {
            Get-ChildItem -Path $p -Directory -ErrorAction SilentlyContinue | ForEach-Object { $dirs += $_.FullName }
          }
          foreach ($p in $cands) {
            if (Test-Path $p -PathType Container) { $dirs += (Resolve-Path $p).Path }
          }
          $dirs = $dirs | Where-Object { Test-Path $_ } | Select-Object -Unique
          if ($dirs.Count -eq 0) { throw "ASan redist dirs not found" }

          $env:PATH = ($dirs -join ';') + ';' + $env:PATH
          Write-Host "ASAN PATH: $($dirs -join ';')"

          $dll = Get-ChildItem -Path $dirs -Filter "clang_rt.asan*_dynamic-x64.dll" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($dll) {
            $outDir = "out\build\${{ matrix.cfg.preset }}\${{ matrix.cfg.config }}"
            New-Item -ItemType Directory -Force -Path $outDir | Out-Null
            Copy-Item $dll.FullName -Destination $outDir -Force
            Write-Host "Copied $($dll.FullName) -> $outDir"
          } else {
            Write-Host "ASan DLL file not found under listed dirs; relying on PATH."
          }

          ctest --preset ${{ matrix.cfg.preset }} --output-on-failure -C ${{ matrix.cfg.config }}

      - name: Build (bench)
        run: cmake --build --preset ${{ matrix.cfg.preset }} --target bench --config ${{ matrix.cfg.config }} -j

      - name: Upload bench artifact
        uses: actions/upload-artifact@v4
        with:
          name: bench-windows-msvc-${{ matrix.cfg.name }}
          path: |
            out/build/${{ matrix.cfg.preset }}/${{ matrix.cfg.config }}/bench.exe
            out/build/${{ matrix.cfg.preset }}/${{ matrix.cfg.config }}/bench.pdb
          if-no-files-found: ignore

  windows-mingw:
    name: Windows (MinGW) — Release
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v4
      - name: Install MinGW & Ninja
        run: |
          choco install -y mingw ninja
          echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Configure (mingw-release)
        run: cmake --preset mingw-release
      - name: Build (tests)
        run: cmake --build --preset mingw-release --target tests -j
      - name: Run tests
        run: ctest --preset mingw-release --output-on-failure
      - name: Build (bench)
        run: cmake --build --preset mingw-release --target bench -j
      - name: Upload bench artifact
        uses: actions/upload-artifact@v4
        with:
          name: bench-windows-mingw
          path: out/build/mingw-release/bench.exe
          if-no-files-found: ignore
